import { Injectable, NotFoundException, BadRequestException, ForbiddenException } from '@nestjs/common';
import { InjectModel } from '@nestjs/mongoose';
import { Model, Types } from 'mongoose';
import { Membership } from '../schemas/membership.schema';
import { CreateMembershipDto } from '../dto/create-membership.dto';
import { UpdateMembershipDto } from '../dto/update-membership.dto';
import { MembershipRole, Role } from 'src/common/enums/role.enum';


@Injectable()
export class MembershipService {
  constructor(
    @InjectModel(Membership.name) private membershipModel: Model<Membership>,
  ) {}

  // ========================================
  // üîó ADICIONAR MEMBROS A MINIST√âRIOS
  // ========================================

  /**
   * Adiciona um volunt√°rio ao minist√©rio
   * Permiss√µes: Leader, BranchAdmin, TenantAdmin, ServusAdmin
   */
  async addVolunteerToMinistry(
    tenantId: string,
    ministryId: string,
    createMembershipDto: CreateMembershipDto,
    currentUserId: string,
  ) {
    console.log('üîó Adicionando volunt√°rio ao minist√©rio...');
    console.log('   - Tenant ID:', tenantId);
    console.log('   - Ministry ID:', ministryId);
    console.log('   - User ID:', createMembershipDto.userId);
    console.log('   - Current User ID:', currentUserId);

    // Verificar se o minist√©rio existe e pertence ao tenant
    const ministry = await this.validateMinistry(tenantId, ministryId);

    // Verificar se o usu√°rio existe
    const user = await this.validateUser(createMembershipDto.userId);

    // Verificar permiss√µes do usu√°rio atual
    await this.validateUserPermissions(currentUserId, tenantId, ministryId, 'add_volunteer');

    // Verificar se j√° existe membership para este usu√°rio neste minist√©rio
    const existingMembership = await this.membershipModel.findOne({
      user: new Types.ObjectId(createMembershipDto.userId),
      tenant: tenantId, // tenantId √© UUID, n√£o ObjectId
      ministry: new Types.ObjectId(ministryId),
      branch: createMembershipDto.branchId ? new Types.ObjectId(createMembershipDto.branchId) : null,
    });

    if (existingMembership) {
      throw new BadRequestException('Usu√°rio j√° est√° vinculado a este minist√©rio');
    }

    // Criar novo membership
    const membership = new this.membershipModel({
      user: new Types.ObjectId(createMembershipDto.userId),
      tenant: tenantId, // tenantId √© UUID, n√£o ObjectId
      branch: createMembershipDto.branchId ? new Types.ObjectId(createMembershipDto.branchId) : null,
      ministry: new Types.ObjectId(ministryId),
      role: MembershipRole.Volunteer, // For√ßa role de volunt√°rio
      isActive: createMembershipDto.isActive ?? true,
    });

    const savedMembership = await membership.save();



    console.log('‚úÖ Volunt√°rio adicionado com sucesso');
    return {
      id: savedMembership._id,
      userId: createMembershipDto.userId,
      ministryId,
      role: savedMembership.role,
      isActive: savedMembership.isActive,
      message: 'Volunt√°rio adicionado ao minist√©rio com sucesso',
    };
  }

  /**
   * Adiciona um l√≠der ao minist√©rio
   * Permiss√µes: BranchAdmin, TenantAdmin, ServusAdmin
   */
  async addLeaderToMinistry(
    tenantId: string,
    ministryId: string,
    createMembershipDto: CreateMembershipDto,
    currentUserId: string,
  ) {
    console.log('üîó Adicionando l√≠der ao minist√©rio...');
    console.log('   - Tenant ID:', tenantId);
    console.log('   - Ministry ID:', ministryId);
    console.log('   - User ID:', createMembershipDto.userId);
    console.log('   - Current User ID:', currentUserId);

    // Verificar se o minist√©rio existe e pertence ao tenant
    const ministry = await this.validateMinistry(tenantId, ministryId);

    // Verificar se o usu√°rio existe
    const user = await this.validateUser(createMembershipDto.userId);

    // Verificar permiss√µes do usu√°rio atual (apenas Admin podem adicionar l√≠deres)
    await this.validateUserPermissions(currentUserId, tenantId, ministryId, 'add_leader');

    // Verificar se j√° existe membership para este usu√°rio neste minist√©rio
    const existingMembership = await this.membershipModel.findOne({
      user: new Types.ObjectId(createMembershipDto.userId),
      tenant: tenantId, // tenantId √© UUID, n√£o ObjectId
      ministry: new Types.ObjectId(ministryId),
      branch: createMembershipDto.branchId ? new Types.ObjectId(createMembershipDto.branchId) : null,
    });

    if (existingMembership) {
      throw new BadRequestException('Usu√°rio j√° est√° vinculado a este minist√©rio');
    }

    // Criar novo membership
    const membership = new this.membershipModel({
      user: new Types.ObjectId(createMembershipDto.userId),
      tenant: tenantId, // tenantId √© UUID, n√£o ObjectId
      branch: createMembershipDto.branchId ? new Types.ObjectId(createMembershipDto.branchId) : null,
      ministry: new Types.ObjectId(ministryId),
      role: MembershipRole.Leader, // For√ßa role de l√≠der
      isActive: createMembershipDto.isActive ?? true,
    });

    const savedMembership = await membership.save();



    console.log('‚úÖ L√≠der adicionado com sucesso');
    return {
      id: savedMembership._id,
      userId: createMembershipDto.userId,
      ministryId,
      role: savedMembership.role,
      isActive: savedMembership.isActive,
      message: 'L√≠der adicionado ao minist√©rio com sucesso',
    };
  }

  // ========================================
  // üîç CONSULTAR MEMBROS
  // ========================================

  /**
   * Lista todos os membros de um minist√©rio
   */
  async getMinistryMembers(
    tenantId: string,
    ministryId: string,
    options: {
      page: number;
      limit: number;
      role?: string;
      search?: string;
      branchId?: string;
    },
    currentUser: any,
  ) {
    console.log('üìã Listando membros do minist√©rio...');
    console.log('   - Tenant ID:', tenantId);
    console.log('   - Ministry ID:', ministryId);
    console.log('   - Options:', options);

    // Debug: Log dos IDs recebidos
    console.log('üîç Debug - IDs recebidos:');
    console.log('   - ministryId:', ministryId, '(tipo:', typeof ministryId, ', length:', ministryId?.length, ')');
    console.log('   - tenantId:', tenantId, '(tipo:', typeof tenantId, ', length:', tenantId?.length, ')');
    console.log('   - branchId:', options.branchId, '(tipo:', typeof options.branchId, ', length:', options.branchId?.length, ')');

    // Validar se ministryId √© um ObjectId v√°lido ANTES de qualquer opera√ß√£o
    if (!Types.ObjectId.isValid(ministryId)) {
      console.error('‚ùå ID do minist√©rio inv√°lido:', ministryId);
      throw new BadRequestException(`ID do minist√©rio inv√°lido: ${ministryId}`);
    }

    // Verificar se o minist√©rio existe e pertence ao tenant
    const ministry = await this.validateMinistry(tenantId, ministryId);

    // Verificar permiss√µes do usu√°rio atual
    await this.validateUserPermissions(currentUser.sub, tenantId, ministryId, 'view_members');

    // Construir filtros
    console.log('üîß Criando filtros...');
    console.log('   - tenantId √© UUID (36 chars), n√£o ObjectId (24 chars)');
    console.log('   - Criando ObjectId para ministryId:', ministryId);
    const ministryObjectId = new Types.ObjectId(ministryId);
    console.log('   - Ministry ObjectId criado:', ministryObjectId);
    
    const filters: any = {
      tenant: tenantId, // tenantId √© UUID, n√£o ObjectId
      ministry: ministryObjectId,
      isActive: true,
    };

    // Filtrar por branch se especificado
    if (options.branchId) {
      console.log('   - branchId recebido:', options.branchId, '(length:', options.branchId.length, ')');
      
      // Verificar se √© ObjectId (24 chars) ou UUID (36 chars)
      if (Types.ObjectId.isValid(options.branchId)) {
        console.log('   - branchId √© ObjectId v√°lido');
        filters.branch = new Types.ObjectId(options.branchId);
      } else if (options.branchId.length === 36) {
        console.log('   - branchId √© UUID, usando como string');
        filters.branch = options.branchId;
      } else {
        throw new BadRequestException('ID da filial inv√°lido: deve ser ObjectId (24 chars) ou UUID (36 chars)');
      }
    } else {
      filters.branch = null; // Apenas membros da matriz
    }

    // Filtrar por role se especificado
    if (options.role) {
      filters.role = options.role;
    }

    // Buscar membros via membership
    const query = this.membershipModel.aggregate([
      { $match: filters },
      {
        $lookup: {
          from: 'users',
          localField: 'user',
          foreignField: '_id',
          as: 'userData',
        },
      },
      { $unwind: '$userData' },
      {
        $lookup: {
          from: 'branches',
          localField: 'branch',
          foreignField: '_id',
          as: 'branchData',
        },
      },
      { $unwind: { path: '$branchData', preserveNullAndEmptyArrays: true } },
      {
        $project: {
          _id: 1,
          user: {
            _id: '$userData._id',
            name: '$userData.name',
            email: '$userData.email',
            phone: '$userData.phone',
            picture: '$userData.picture',
          },
          branch: '$branchData',
          role: 1,
          isActive: 1,
          createdAt: 1,
          updatedAt: 1,
        },
      },
    ]);

    // Aplicar busca por texto se especificado
    if (options.search) {
      query.match({
        $or: [
          { 'user.name': { $regex: options.search, $options: 'i' } },
          { 'user.email': { $regex: options.search, $options: 'i' } },
        ],
      });
    }

    // Contar total para pagina√ß√£o
    const totalQuery = this.membershipModel.aggregate([
      { $match: filters },
      { $count: 'total' },
    ]);

    const [totalResult] = await totalQuery;
    const total = totalResult?.total || 0;

    // Aplicar pagina√ß√£o
    const skip = (options.page - 1) * options.limit;
    const members = await query.skip(skip).limit(options.limit).exec();

    console.log('‚úÖ Membros listados com sucesso');
    console.log('   - Members count:', members.length);
    console.log('   - Members type:', typeof members);
    console.log('   - Is array:', Array.isArray(members));
    
    return {
      members,
      pagination: {
        page: options.page,
        limit: options.limit,
        total,
        pages: Math.ceil(total / options.limit),
      },
    };
  }

  // ========================================
  // üóëÔ∏è REMOVER MEMBROS
  // ========================================

  /**
   * Remove um membro do minist√©rio
   * Permiss√µes: Leader pode remover volunt√°rios, Admin pode remover todos
   */
  async removeMinistryMember(
    tenantId: string,
    ministryId: string,
    membershipId: string,
    currentUserId: string,
    branchId?: string,
  ) {
    console.log('üóëÔ∏è Removendo membro do minist√©rio...');
    console.log('   - Tenant ID:', tenantId);
    console.log('   - Ministry ID:', ministryId);
    console.log('   - Membership ID:', membershipId);
    console.log('   - Current User ID:', currentUserId);
    console.log('   - Branch ID:', branchId);

    // Verificar se o minist√©rio existe e pertence ao tenant
    const ministry = await this.validateMinistry(tenantId, ministryId);

    // Buscar o membership
    const membership = await this.membershipModel.findById(membershipId);
    if (!membership) {
      throw new NotFoundException('V√≠nculo n√£o encontrado');
    }

    // Verificar se o membership pertence ao minist√©rio correto
    if (!membership.ministry || membership.ministry.toString() !== ministryId) {
      throw new BadRequestException('V√≠nculo n√£o pertence a este minist√©rio');
    }

    // Verificar se o membership pertence ao tenant correto
    if (!membership.tenant || membership.tenant.toString() !== tenantId) {
      throw new BadRequestException('V√≠nculo n√£o pertence a este tenant');
    }

    // Verificar permiss√µes do usu√°rio atual
    await this.validateUserPermissions(currentUserId, tenantId, ministryId, 'remove_member', membership);

    // Remover o membership
    await this.membershipModel.findByIdAndDelete(membershipId);

    console.log('‚úÖ Membro removido com sucesso');
    return {
      message: 'Membro removido do minist√©rio com sucesso',
    };
  }

  // ========================================
  // üîÑ ATUALIZAR MEMBROS
  // ========================================

  /**
   * Atualiza a role de um membro
   * Permiss√µes: Apenas Admin
   */
  async updateMemberRole(
    tenantId: string,
    ministryId: string,
    membershipId: string,
    updateMembershipDto: UpdateMembershipDto,
    currentUserId: string,
    branchId?: string,
  ) {
    console.log('‚úèÔ∏è Atualizando role do membro...');
    console.log('   - Tenant ID:', tenantId);
    console.log('   - Ministry ID:', ministryId);
    console.log('   - Membership ID:', membershipId);
    console.log('   - Current User ID:', currentUserId);
    console.log('   - Branch ID:', branchId);
    console.log('   - Update Data:', updateMembershipDto);

    // Verificar se o minist√©rio existe e pertence ao tenant
    const ministry = await this.validateMinistry(tenantId, ministryId);

    // Buscar o membership
    const membership = await this.membershipModel.findById(membershipId);
    if (!membership) {
      throw new NotFoundException('V√≠nculo n√£o encontrado');
    }

    // Verificar se o membership pertence ao minist√©rio correto
    if (!membership.ministry || membership.ministry.toString() !== ministryId) {
      throw new BadRequestException('V√≠nculo n√£o pertence a este minist√©rio');
    }

    // Verificar se o membership pertence ao tenant correto
    if (!membership.tenant || membership.tenant.toString() !== tenantId) {
      throw new BadRequestException('V√≠nculo n√£o pertence a este tenant');
    }

    // Verificar permiss√µes do usu√°rio atual (apenas Admin podem alterar roles)
    await this.validateUserPermissions(currentUserId, tenantId, ministryId, 'update_role');

    // Atualizar o membership
    const updatedMembership = await this.membershipModel.findByIdAndUpdate(
      membershipId,
      {
        $set: {
          ...(updateMembershipDto.role && { role: updateMembershipDto.role }),
          ...(updateMembershipDto.isActive !== undefined && { isActive: updateMembershipDto.isActive }),
        },
      },
      { new: true },
    );

    if (!updatedMembership) {
      throw new NotFoundException('Erro ao atualizar membership');
    }

    console.log('‚úÖ Role atualizada com sucesso');
    return {
      id: updatedMembership._id,
      role: updatedMembership.role,
      isActive: updatedMembership.isActive,
      message: 'Role do membro atualizada com sucesso',
    };
  }

  // ========================================
  // üîß M√âTODOS AUXILIARES
  // ========================================

  /**
   * Valida se o minist√©rio existe e pertence ao tenant
   */
  private async validateMinistry(tenantId: string, ministryId: string) {
    // TODO: Implementar valida√ß√£o do minist√©rio
    // Por enquanto, retorna true
    return true;
  }

  /**
   * Valida se o usu√°rio existe
   */
  private async validateUser(userId: string) {
    // TODO: Implementar valida√ß√£o do usu√°rio
    // Por enquanto, retorna true
    return true;
  }

  /**
   * Valida as permiss√µes do usu√°rio atual
   */
  private async validateUserPermissions(
    currentUserId: string,
    tenantId: string,
    ministryId: string,
    action: 'add_volunteer' | 'add_leader' | 'view_members' | 'remove_member' | 'update_role',
    targetMembership?: any,
  ) {
    // TODO: Implementar valida√ß√£o de permiss√µes baseada no sistema atual
    // Por enquanto, permite todas as a√ß√µes
    console.log('üîê Validando permiss√µes...');
    console.log('   - Action:', action);
    console.log('   - Current User ID:', currentUserId);
    console.log('   - Target Membership:', targetMembership);
    
    return true;
  }
}
