import { Injectable, NotFoundException, BadRequestException, ForbiddenException } from '@nestjs/common';
import { InjectModel } from '@nestjs/mongoose';
import { Model, Types } from 'mongoose';
import { Membership } from '../schemas/membership.schema';
import { CreateMembershipDto } from '../dto/create-membership.dto';
import { UpdateMembershipDto } from '../dto/update-membership.dto';
import { MembershipRole, Role } from 'src/common/enums/role.enum';
import { Ministry } from '../../ministries/schemas/ministry.schema';
import { MemberFunctionService } from '../../functions/services/member-function.service';
import { FunctionsService } from '../../functions/services/functions.service';
import { MemberFunctionStatus, MemberFunctionLevel } from '../../functions/schemas/member-function.schema';
import { MembershipIntegrityService } from './membership-integrity.service';


@Injectable()
export class MembershipService {
  constructor(
    @InjectModel(Membership.name) private membershipModel: Model<Membership>,
    @InjectModel(Ministry.name) private ministryModel: Model<Ministry>,
    private memberFunctionService: MemberFunctionService,
    private functionsService: FunctionsService,
    private integrityService: MembershipIntegrityService,
  ) {}

  // ========================================
  // üîó ADICIONAR MEMBROS A MINIST√âRIOS
  // ========================================

  /**
   * Adiciona um volunt√°rio ao minist√©rio
   * Permiss√µes: Leader, BranchAdmin, TenantAdmin, ServusAdmin
   */
  async addVolunteerToMinistry(
    tenantId: string, // ObjectId como string // ObjectId como string
    ministryId: string,
    createMembershipDto: CreateMembershipDto,
    currentUserId: string,
  ) {
    console.log('üîó Adicionando volunt√°rio ao minist√©rio...');
    console.log('   - Tenant ID:', tenantId);
    console.log('   - Ministry ID:', ministryId);
    console.log('   - User ID:', createMembershipDto.userId);
    console.log('   - Current User ID:', currentUserId);

    // Verificar se o minist√©rio existe e pertence ao tenant
    const ministry = await this.validateMinistry(tenantId, ministryId);

    // Verificar se o usu√°rio existe
    const user = await this.validateUser(createMembershipDto.userId);

    // Verificar permiss√µes do usu√°rio atual
    await this.validateUserPermissions(currentUserId, tenantId, ministryId, 'add_volunteer');

    // Verificar se j√° existe membership ATIVO para este usu√°rio neste minist√©rio
    const existingMembership = await this.membershipModel.findOne({
      user: new Types.ObjectId(createMembershipDto.userId),
      tenant: new Types.ObjectId(tenantId), // ObjectId do tenant
      ministry: new Types.ObjectId(ministryId),
      branch: createMembershipDto.branchId ? new Types.ObjectId(createMembershipDto.branchId) : null,
      isActive: true, // ‚Üê S√≥ considera memberships ativos
    });

    if (existingMembership) {
      throw new BadRequestException('Usu√°rio j√° est√° vinculado a este minist√©rio');
    }

    // Criar novo membership
    const membership = new this.membershipModel({
      user: new Types.ObjectId(createMembershipDto.userId),
      tenant: new Types.ObjectId(tenantId), // ObjectId do tenant
      branch: createMembershipDto.branchId ? new Types.ObjectId(createMembershipDto.branchId) : null,
      ministry: new Types.ObjectId(ministryId),
      role: MembershipRole.Volunteer, // For√ßa role de volunt√°rio
      isActive: createMembershipDto.isActive ?? true,
    });

    const savedMembership = await membership.save();



    console.log('‚úÖ Volunt√°rio adicionado com sucesso');
    return {
      id: savedMembership._id,
      userId: createMembershipDto.userId,
      ministryId,
      role: savedMembership.role,
      isActive: savedMembership.isActive,
      message: 'Volunt√°rio adicionado ao minist√©rio com sucesso',
    };
  }

  /**
   * Adiciona um l√≠der ao minist√©rio
   * Permiss√µes: BranchAdmin, TenantAdmin, ServusAdmin
   */
  async addLeaderToMinistry(
    tenantId: string, // ObjectId como string
    ministryId: string,
    createMembershipDto: CreateMembershipDto,
    currentUserId: string,
  ) {
    console.log('üîó Adicionando l√≠der ao minist√©rio...');
    console.log('   - Tenant ID:', tenantId);
    console.log('   - Ministry ID:', ministryId);
    console.log('   - User ID:', createMembershipDto.userId);
    console.log('   - Current User ID:', currentUserId);

    // Verificar se o minist√©rio existe e pertence ao tenant
    const ministry = await this.validateMinistry(tenantId, ministryId);

    // Verificar se o usu√°rio existe
    const user = await this.validateUser(createMembershipDto.userId);

    // Verificar permiss√µes do usu√°rio atual (apenas Admin podem adicionar l√≠deres)
    await this.validateUserPermissions(currentUserId, tenantId, ministryId, 'add_leader');

    // Verificar se j√° existe membership ATIVO para este usu√°rio neste minist√©rio
    const existingMembership = await this.membershipModel.findOne({
      user: new Types.ObjectId(createMembershipDto.userId),
      tenant: new Types.ObjectId(tenantId), // ObjectId do tenant
      ministry: new Types.ObjectId(ministryId),
      branch: createMembershipDto.branchId ? new Types.ObjectId(createMembershipDto.branchId) : null,
      isActive: true, // ‚Üê S√≥ considera memberships ativos
    });

    if (existingMembership) {
      throw new BadRequestException('Usu√°rio j√° est√° vinculado a este minist√©rio');
    }

    // Criar novo membership
    const membership = new this.membershipModel({
      user: new Types.ObjectId(createMembershipDto.userId),
      tenant: new Types.ObjectId(tenantId), // ObjectId do tenant
      branch: createMembershipDto.branchId ? new Types.ObjectId(createMembershipDto.branchId) : null,
      ministry: new Types.ObjectId(ministryId),
      role: MembershipRole.Leader, // For√ßa role de l√≠der
      isActive: createMembershipDto.isActive ?? true,
    });

    const savedMembership = await membership.save();



    console.log('‚úÖ L√≠der adicionado com sucesso');
    return {
      id: savedMembership._id,
      userId: createMembershipDto.userId,
      ministryId,
      role: savedMembership.role,
      isActive: savedMembership.isActive,
      message: 'L√≠der adicionado ao minist√©rio com sucesso',
    };
  }

  // ========================================
  // üîç CONSULTAR MEMBROS
  // ========================================

  /**
   * Lista todos os membros de um minist√©rio
   */
  async getMinistryMembers(
    tenantId: string, // ObjectId como string
    ministryId: string,
    options: {
      page: number;
      limit: number;
      role?: string;
      search?: string;
      branchId?: string;
    },
    currentUser: any,
  ) {
    console.log('üìã Listando membros do minist√©rio...');
    console.log('   - Tenant ID:', tenantId);
    console.log('   - Ministry ID:', ministryId);
    console.log('   - Options:', options);

    // Debug: Log dos IDs recebidos
    console.log('üîç Debug - IDs recebidos:');
    console.log('   - ministryId:', ministryId, '(tipo:', typeof ministryId, ', length:', ministryId?.length, ')');
    console.log('   - tenantId:', tenantId, '(tipo:', typeof tenantId, ', length:', tenantId?.length, ')');
    console.log('   - branchId:', options.branchId, '(tipo:', typeof options.branchId, ', length:', options.branchId?.length, ')');

    // Validar se ministryId √© um ObjectId v√°lido ANTES de qualquer opera√ß√£o
    // Aceita tanto ObjectId (24 chars) quanto UUID (36 chars)
    if (!Types.ObjectId.isValid(ministryId) && ministryId.length !== 36) {
      console.error('‚ùå ID do minist√©rio inv√°lido:', ministryId);
      throw new BadRequestException(`ID do minist√©rio inv√°lido: ${ministryId}`);
    }

    // Verificar se o minist√©rio existe e pertence ao tenant
    const ministry = await this.validateMinistry(tenantId, ministryId);

    // Verificar permiss√µes do usu√°rio atual
    await this.validateUserPermissions(currentUser.sub, tenantId, ministryId, 'view_members');

    // Construir filtros
    console.log('üîß Criando filtros...');
    console.log('   - tenantId √© UUID string');
    console.log('   - ministryId:', ministryId, '(length:', ministryId.length, ')');
    
    const filters: any = {
      tenant: new Types.ObjectId(tenantId), // ObjectId do tenant
      ministry: Types.ObjectId.isValid(ministryId) ? new Types.ObjectId(ministryId) : ministryId,
      isActive: true,
    };
    
    console.log('   - Filtros criados:', JSON.stringify(filters, null, 2));

    // Filtrar por branch se especificado
    if (options.branchId) {
      console.log('   - branchId recebido:', options.branchId, '(length:', options.branchId.length, ')');
      
      // Verificar se √© ObjectId (24 chars) ou UUID (36 chars)
      if (Types.ObjectId.isValid(options.branchId)) {
        console.log('   - branchId √© ObjectId v√°lido');
        filters.branch = new Types.ObjectId(options.branchId);
      } else if (options.branchId.length === 36) {
        console.log('   - branchId √© UUID, usando como string');
        filters.branch = options.branchId;
      } else {
        throw new BadRequestException('ID da filial inv√°lido: deve ser ObjectId (24 chars) ou UUID (36 chars)');
      }
    }
    // Se n√£o h√° branchId, n√£o adiciona filtro de branch - permite tanto matriz quanto filiais

    // Filtrar por role se especificado
    if (options.role) {
      filters.role = options.role;
    }

    // Buscar membros via membership
    console.log('üîç Executando query de agrega√ß√£o...');
    console.log('   - Filtros:', JSON.stringify(filters, null, 2));
    
    // Teste: verificar se h√° membros no banco
    const totalMemberships = await this.membershipModel.countDocuments();
    console.log('   - Total de memberships no banco:', totalMemberships);
    
    const membershipsWithMinistry = await this.membershipModel.countDocuments({
      ministry: Types.ObjectId.isValid(ministryId) ? new Types.ObjectId(ministryId) : ministryId
    });
    console.log('   - Memberships com este minist√©rio:', membershipsWithMinistry);
    
    // Primeiro, vamos testar uma query simples
    console.log('üîç Testando query simples...');
    const simpleQuery = await this.membershipModel.find(filters).limit(5).exec();
    console.log('   - Query simples retornou:', simpleQuery.length, 'documentos');
    
    if (simpleQuery.length > 0) {
      console.log('   - Primeiro documento:', JSON.stringify(simpleQuery[0], null, 2));
    }
    
    const query = this.membershipModel.aggregate([
      { $match: filters },
      {
        $lookup: {
          from: 'users',
          localField: 'user',
          foreignField: '_id',
          as: 'userData',
        },
      },
      { $unwind: '$userData' },
      {
        $lookup: {
          from: 'branches',
          localField: 'branch',
          foreignField: '_id',
          as: 'branchData',
        },
      },
      { $unwind: { path: '$branchData', preserveNullAndEmptyArrays: true } },
      {
        $project: {
          _id: 1,
          user: {
            _id: '$userData._id',
            name: '$userData.name',
            email: '$userData.email',
            phone: '$userData.phone',
            picture: '$userData.picture',
          },
          branch: '$branchData',
          role: 1,
          isActive: 1,
          createdAt: 1,
          updatedAt: 1,
        },
      },
    ]);

    // Aplicar busca por texto se especificado
    if (options.search) {
      query.match({
        $or: [
          { 'user.name': { $regex: options.search, $options: 'i' } },
          { 'user.email': { $regex: options.search, $options: 'i' } },
        ],
      });
    }

    // Contar total para pagina√ß√£o
    console.log('üîç Executando query de contagem...');
    const totalQuery = this.membershipModel.aggregate([
      { $match: filters },
      { $count: 'total' },
    ]);

    const [totalResult] = await totalQuery;
    const total = totalResult?.total || 0;
    console.log('   - Total encontrado:', total);

    // Aplicar pagina√ß√£o
    const skip = (options.page - 1) * options.limit;
    console.log('üîç Aplicando pagina√ß√£o...');
    console.log('   - Skip:', skip);
    console.log('   - Limit:', options.limit);
    
    const members = await query.skip(skip).limit(options.limit).exec();

    console.log('‚úÖ Membros listados com sucesso');
    console.log('   - Members count:', members.length);
    console.log('   - Members type:', typeof members);
    console.log('   - Is array:', Array.isArray(members));
    
    if (members.length > 0) {
      console.log('   - Primeiro membro:', JSON.stringify(members[0], null, 2));
    }
    
    return {
      members,
      pagination: {
        page: options.page,
        limit: options.limit,
        total,
        pages: Math.ceil(total / options.limit),
      },
    };
  }

  // ========================================
  // üóëÔ∏è REMOVER MEMBROS
  // ========================================

  /**
   * Remove um membro do minist√©rio com valida√ß√µes de integridade
   * Permiss√µes: Leader pode remover volunt√°rios, Admin pode remover todos
   */
  async removeMinistryMember(
    tenantId: string, // ObjectId como string
    ministryId: string,
    membershipId: string,
    currentUserId: string,
    branchId?: string,
  ) {
    console.log('üóëÔ∏è [MembershipService] Removendo membro do minist√©rio com valida√ß√µes de integridade...');
    console.log('   - Tenant ID:', tenantId);
    console.log('   - Ministry ID:', ministryId);
    console.log('   - Membership ID:', membershipId);
    console.log('   - Current User ID:', currentUserId);
    console.log('   - Branch ID:', branchId);

    // Verificar se o minist√©rio existe e pertence ao tenant
    const ministry = await this.validateMinistry(tenantId, ministryId);

    // Buscar o membership
    const membership = await this.membershipModel.findById(membershipId);
    if (!membership) {
      throw new NotFoundException('V√≠nculo n√£o encontrado');
    }

    // Verificar se o membership pertence ao minist√©rio correto
    if (!membership.ministry || membership.ministry.toString() !== ministryId) {
      throw new BadRequestException('V√≠nculo n√£o pertence a este minist√©rio');
    }

    // Verificar se o membership pertence ao tenant correto
    if (!membership.tenant || membership.tenant.toString() !== tenantId) {
      throw new BadRequestException('V√≠nculo n√£o pertence a este tenant');
    }

    // Verificar permiss√µes do usu√°rio atual
    await this.validateUserPermissions(currentUserId, tenantId, ministryId, 'remove_member', membership);

    const userId = membership.user.toString();

    // üîç VALIDA√á√ÉO DE INTEGRIDADE: Verificar se remo√ß√£o n√£o deixar√° usu√°rio √≥rf√£o
    const integrityCheck = await this.integrityService.validateMembershipRemoval(
      userId, 
      membershipId, 
      tenantId
    );

    if (!integrityCheck.valid) {
      throw new BadRequestException(integrityCheck.reason);
    }

    console.log('‚úÖ [MembershipService] Valida√ß√£o de integridade aprovada');
    console.log(`üìä [MembershipService] Memberships restantes: ${integrityCheck.remainingMemberships}`);

    // üóëÔ∏è REMO√á√ÉO EM CASCATA: Remover todas as fun√ß√µes do usu√°rio neste minist√©rio
    console.log('üóëÔ∏è [MembershipService] Removendo fun√ß√µes do usu√°rio no minist√©rio...');
    const deletedFunctionsCount = await this.integrityService.removeMemberFunctionsFromMinistry(
      userId,
      ministryId,
      tenantId,
      branchId
    );
    console.log(`‚úÖ [MembershipService] ${deletedFunctionsCount} fun√ß√µes removidas do usu√°rio no minist√©rio`);

    // üóëÔ∏è EXCLUIR definitivamente o membership
    await this.membershipModel.findByIdAndDelete(membershipId);
    console.log('‚úÖ [MembershipService] Membro desvinculado com sucesso (membership exclu√≠do)');

    // üîß GARANTIR MEMBERSHIP PADR√ÉO: Se necess√°rio, criar membership padr√£o
    await this.integrityService.ensureDefaultMembership(userId, tenantId, currentUserId);

    return {
      message: 'Membro desvinculado do minist√©rio com sucesso',
      deletedFunctionsCount,
      remainingMemberships: integrityCheck.remainingMemberships,
    };
  }

  /**
   * Desvincula um membro de um minist√©rio (exclui membership permanentemente)
   * Remove TUDO relacionado ao v√≠nculo: MemberFunctions + Memberships
   */
  async unlinkMemberFromMinistry(
    tenantId: string,
    ministryId: string,
    userId: string,
    currentUserId: string,
    branchId?: string,
  ) {
    console.log('üîó [MembershipService] Desvinculando membro do minist√©rio...');
    console.log('   - Tenant ID:', tenantId);
    console.log('   - Ministry ID:', ministryId);
    console.log('   - User ID:', userId);
    console.log('   - Current User ID:', currentUserId);
    console.log('   - Branch ID:', branchId);

    // Verificar se o minist√©rio existe e pertence ao tenant
    const ministry = await this.validateMinistry(tenantId, ministryId);

    // Verificar permiss√µes do usu√°rio atual
    await this.validateUserPermissions(currentUserId, tenantId, ministryId, 'remove_member');

    // üîç VALIDA√á√ÉO DE INTEGRIDADE: Verificar se desvincula√ß√£o n√£o deixar√° usu√°rio √≥rf√£o
    const integrityCheck = await this.integrityService.validateMinistryRemoval(
      userId,
      ministryId,
      tenantId
    );

    if (!integrityCheck.valid) {
      throw new BadRequestException(integrityCheck.reason);
    }

    console.log('‚úÖ [MembershipService] Valida√ß√£o de integridade aprovada');
    console.log(`üìä [MembershipService] Memberships afetados: ${integrityCheck.affectedMemberships}`);

    // üóëÔ∏è REMO√á√ÉO EM CASCATA: Remover todas as fun√ß√µes do usu√°rio neste minist√©rio
    console.log('üóëÔ∏è [MembershipService] Removendo fun√ß√µes do usu√°rio no minist√©rio...');
    const deletedFunctionsCount = await this.integrityService.removeMemberFunctionsFromMinistry(
      userId,
      ministryId,
      tenantId,
      branchId
    );
    console.log(`‚úÖ [MembershipService] ${deletedFunctionsCount} fun√ß√µes removidas do usu√°rio no minist√©rio`);

    // üóëÔ∏è EXCLUIR memberships do usu√°rio neste minist√©rio (exclus√£o completa)
    const query: any = {
      user: new Types.ObjectId(userId),
      tenant: new Types.ObjectId(tenantId),
      ministry: new Types.ObjectId(ministryId)
    };

    if (branchId) {
      query.branch = new Types.ObjectId(branchId);
    } else {
      query.branch = null; // Matriz
    }

    const result = await this.membershipModel.deleteMany(query);

    console.log(`‚úÖ [MembershipService] ${result.deletedCount} memberships exclu√≠dos permanentemente`);

    // üîß GARANTIR MEMBERSHIP PADR√ÉO: Se necess√°rio, criar membership padr√£o
    await this.integrityService.ensureDefaultMembership(userId, tenantId, currentUserId);

    return {
      message: 'Membro desvinculado do minist√©rio com sucesso - todos os dados relacionados foram exclu√≠dos',
      deletedFunctionsCount,
      deletedMemberships: result.deletedCount,
      affectedMemberships: integrityCheck.affectedMemberships,
    };
  }

  // ========================================
  // üîÑ ATUALIZAR MEMBROS
  // ========================================

  /**
   * Atualiza a role de um membro
   * Permiss√µes: Apenas Admin
   */
  async updateMemberRole(
    tenantId: string, // ObjectId como string
    ministryId: string,
    membershipId: string,
    updateMembershipDto: UpdateMembershipDto,
    currentUserId: string,
    branchId?: string,
  ) {
    console.log('‚úèÔ∏è Atualizando role do membro...');
    console.log('   - Tenant ID:', tenantId);
    console.log('   - Ministry ID:', ministryId);
    console.log('   - Membership ID:', membershipId);
    console.log('   - Current User ID:', currentUserId);
    console.log('   - Branch ID:', branchId);
    console.log('   - Update Data:', updateMembershipDto);

    // Verificar se o minist√©rio existe e pertence ao tenant
    const ministry = await this.validateMinistry(tenantId, ministryId);

    // Buscar o membership
    const membership = await this.membershipModel.findById(membershipId);
    if (!membership) {
      throw new NotFoundException('V√≠nculo n√£o encontrado');
    }

    // Verificar se o membership pertence ao minist√©rio correto
    if (!membership.ministry || membership.ministry.toString() !== ministryId) {
      throw new BadRequestException('V√≠nculo n√£o pertence a este minist√©rio');
    }

    // Verificar se o membership pertence ao tenant correto
    if (!membership.tenant || membership.tenant.toString() !== tenantId) {
      throw new BadRequestException('V√≠nculo n√£o pertence a este tenant');
    }

    // Verificar permiss√µes do usu√°rio atual (apenas Admin podem alterar roles)
    await this.validateUserPermissions(currentUserId, tenantId, ministryId, 'update_role');

    // Atualizar o membership
    const updatedMembership = await this.membershipModel.findByIdAndUpdate(
      membershipId,
      {
        $set: {
          ...(updateMembershipDto.role && { role: updateMembershipDto.role }),
          ...(updateMembershipDto.isActive !== undefined && { isActive: updateMembershipDto.isActive }),
        },
      },
      { new: true },
    );

    if (!updatedMembership) {
      throw new NotFoundException('Erro ao atualizar membership');
    }

    console.log('‚úÖ Role atualizada com sucesso');
    return {
      id: updatedMembership._id,
      role: updatedMembership.role,
      isActive: updatedMembership.isActive,
      message: 'Role do membro atualizada com sucesso',
    };
  }

  // ========================================
  // üîß M√âTODOS AUXILIARES
  // ========================================

  /**
   * Valida se o minist√©rio existe e pertence ao tenant
   */
  private async validateMinistry(tenantId: string, ministryId: string) { // tenantId √© ObjectId como string
    console.log('üîç Validando minist√©rio...');
    console.log('   - tenantId:', tenantId);
    console.log('   - ministryId:', ministryId);
    
    try {
      const ministry = await this.ministryModel.findOne({
        _id: Types.ObjectId.isValid(ministryId) ? new Types.ObjectId(ministryId) : ministryId,
        tenantId: new Types.ObjectId(tenantId), // ObjectId do tenant
      });
      
      if (!ministry) {
        console.log('‚ùå Minist√©rio n√£o encontrado');
        throw new BadRequestException('Minist√©rio n√£o encontrado ou n√£o pertence ao tenant');
      }
      
      console.log('‚úÖ Minist√©rio validado:', ministry.name);
      return ministry;
    } catch (error) {
      console.log('‚ùå Erro ao validar minist√©rio:', error);
      throw error;
    }
  }

  /**
   * Valida se o usu√°rio existe
   */
  private async validateUser(userId: string) {
    // TODO: Implementar valida√ß√£o do usu√°rio
    // Por enquanto, retorna true
    return true;
  }

  /**
   * Valida as permiss√µes do usu√°rio atual
   */
  private async validateUserPermissions(
    currentUserId: string,
    tenantId: string, // ObjectId como string
    ministryId: string,
    action: 'add_volunteer' | 'add_leader' | 'view_members' | 'remove_member' | 'update_role',
    targetMembership?: any,
  ) {
    // TODO: Implementar valida√ß√£o de permiss√µes baseada no sistema atual
    // Por enquanto, permite todas as a√ß√µes
    console.log('üîê Validando permiss√µes...');
    console.log('   - Action:', action);
    console.log('   - Current User ID:', currentUserId);
    console.log('   - Target Membership:', targetMembership);
    
    return true;
  }

  // ========================================
  // üîó M√âTODOS DE MINISTRY-MEMBERSHIP (MIGRADOS)
  // ========================================

  /**
   * Vincular usu√°rio a um minist√©rio (m√©todo unificado)
   */
  async addUserToMinistry(
    userId: string,
    ministryId: string,
    role: MembershipRole,
    createdBy?: string,
    createdByRole?: string
  ) {
    console.log('üîó [MembershipService] addUserToMinistry iniciado');
    console.log('üìã [MembershipService] Par√¢metros recebidos:', {
      userId,
      ministryId,
      role,
      createdBy,
      createdByRole,
      userIdType: typeof userId,
      ministryIdType: typeof ministryId,
      roleType: typeof role
    });

    try {
      // Buscar tenant do minist√©rio
      console.log('üîç [MembershipService] Buscando minist√©rio...');
      const ministry = await this.ministryModel.findById(ministryId).select('tenantId');
      
      console.log('üìä [MembershipService] Minist√©rio encontrado:', {
        ministryExists: !!ministry,
        ministryId: ministry?._id,
        tenantId: ministry?.tenantId,
        tenantIdType: typeof ministry?.tenantId
      });
      
      if (!ministry || !ministry.tenantId) {
        console.log('‚ùå [MembershipService] Minist√©rio n√£o encontrado ou sem tenant');
        throw new BadRequestException('Minist√©rio n√£o encontrado ou sem tenant');
      }

      const tenantId = ministry.tenantId;
      console.log('‚úÖ [MembershipService] TenantId obtido:', {
        tenantId,
        tenantIdType: typeof tenantId,
        tenantIdString: tenantId.toString()
      });

      // Verificar se j√° existe v√≠nculo ativo
      console.log('üîç [MembershipService] Verificando v√≠nculos existentes...');
      const existingMembership = await this.membershipModel.findOne({
        user: new Types.ObjectId(userId),
        ministry: new Types.ObjectId(ministryId),
        isActive: true,
      });

      console.log('üìä [MembershipService] V√≠nculo ativo encontrado:', {
        exists: !!existingMembership,
        membershipId: existingMembership?._id
      });

      if (existingMembership) {
        console.log('‚ùå [MembershipService] Usu√°rio j√° est√° vinculado a este minist√©rio');
        throw new BadRequestException('Usu√°rio j√° est√° vinculado a este minist√©rio');
      }

      // Verificar se existe v√≠nculo inativo para reativar
      console.log('üîç [MembershipService] Verificando v√≠nculos inativos...');
      const inactiveMembership = await this.membershipModel.findOne({
        user: new Types.ObjectId(userId),
        ministry: new Types.ObjectId(ministryId),
        isActive: false,
      });

      console.log('üìä [MembershipService] V√≠nculo inativo encontrado:', {
        exists: !!inactiveMembership,
        membershipId: inactiveMembership?._id
      });

      if (inactiveMembership) {
        // Reativar v√≠nculo existente
        console.log('üîÑ [MembershipService] Reativando v√≠nculo existente...');
        inactiveMembership.isActive = true;
        inactiveMembership.role = role === 'leader' ? MembershipRole.Leader : MembershipRole.Volunteer;
        
        const updatedMembership = await inactiveMembership.save();
        console.log('‚úÖ [MembershipService] V√≠nculo reativado:', updatedMembership._id);

        // Criar UserFunctions para o usu√°rio no minist√©rio
        console.log('üîß [MembershipService] Criando MemberFunctions para v√≠nculo reativado...');
        await this._createMemberFunctionsForMinistry(userId, ministryId, role, tenantId, createdBy, createdByRole);

        console.log('‚úÖ [MembershipService] addUserToMinistry conclu√≠do (reativa√ß√£o)');
        return updatedMembership;
      }

      // Criar novo v√≠nculo
      console.log('üÜï [MembershipService] Criando novo v√≠nculo...');
      const membership = new this.membershipModel({
        user: new Types.ObjectId(userId),
        tenant: ministry.tenantId,
        ministry: new Types.ObjectId(ministryId),
        role: role === 'leader' ? MembershipRole.Leader : MembershipRole.Volunteer,
        isActive: true,
      });

      console.log('üíæ [MembershipService] Salvando novo membership...');
      const savedMembership = await membership.save();
      console.log('‚úÖ [MembershipService] V√≠nculo criado:', savedMembership._id);

      // Criar UserFunctions para o usu√°rio no minist√©rio
      console.log('üîß [MembershipService] Criando MemberFunctions para novo v√≠nculo...');
      await this._createMemberFunctionsForMinistry(userId, ministryId, role, tenantId, createdBy, createdByRole);

      console.log('‚úÖ [MembershipService] addUserToMinistry conclu√≠do (novo v√≠nculo)');
      return savedMembership;
      
    } catch (error) {
      console.error('‚ùå [MembershipService] Erro em addUserToMinistry:', error);
      console.error('‚ùå [MembershipService] Stack trace:', error.stack);
      throw error;
    }
  }


  /**
   * Listar membros de um minist√©rio (vers√£o simplificada para ministry-memberships)
   */
  async getMinistryMembersSimple(
    ministryId: string,
    options: {
      role?: MembershipRole;
      includeInactive?: boolean;
      limit?: number;
      offset?: number;
    } = {}
  ) {
    console.log('üë• Listando membros do minist√©rio (vers√£o simplificada)...');
    console.log('   - Ministry ID:', ministryId);
    console.log('   - Options:', options);

    const query: any = {
      ministry: ministryId,
    };

    if (!options.includeInactive) {
      query.isActive = true;
    }

    if (options.role) {
      query.role = options.role;
    }

    const memberships = await this.membershipModel
      .find(query)
      .populate('user', 'name email picture phone')
      .sort({ createdAt: -1 })
      .limit(options.limit || 100)
      .skip(options.offset || 0);

    console.log(`‚úÖ Encontrados ${memberships.length} membros`);
    return memberships;
  }

  /**
   * Listar minist√©rios de um usu√°rio
   */
  async getUserMinistries(
    userId: string,
    options: {
      includeInactive?: boolean;
      role?: MembershipRole;
    } = {}
  ) {
    console.log('üèõÔ∏è Listando minist√©rios do usu√°rio...');
    console.log('   - User ID:', userId);
    console.log('   - Options:', options);

    const query: any = {
      user: new Types.ObjectId(userId),
    };

    if (!options.includeInactive) {
      query.isActive = true;
    }

    if (options.role) {
      query.role = options.role;
    }

    const memberships = await this.membershipModel
      .find(query)
      .populate('ministry', 'name description')
      .sort({ createdAt: -1 });

    console.log(`‚úÖ Encontrados ${memberships.length} minist√©rios`);
    return memberships;
  }

  /**
   * Atualizar v√≠nculo de minist√©rio
   */
  async updateMinistryMembership(
    userId: string,
    ministryId: string,
    updateData: {
      role?: MembershipRole;
    }
  ) {
    console.log('‚úèÔ∏è Atualizando v√≠nculo de minist√©rio...');
    console.log('   - User ID:', userId);
    console.log('   - Ministry ID:', ministryId);
    console.log('   - Update data:', updateData);

    const membership = await this.membershipModel.findOne({
      user: new Types.ObjectId(userId),
      ministry: new Types.ObjectId(ministryId),
      isActive: true,
    });

    if (!membership) {
      throw new NotFoundException('V√≠nculo n√£o encontrado');
    }

    if (updateData.role) {
      membership.role = updateData.role;
    }

    const updatedMembership = await membership.save();
    console.log('‚úÖ V√≠nculo atualizado com sucesso');
    return updatedMembership;
  }

  /**
   * Verificar se usu√°rio est√° vinculado a um minist√©rio
   */
  async isUserInMinistry(userId: string, ministryId: string): Promise<boolean> {
    const membership = await this.membershipModel.findOne({
      user: new Types.ObjectId(userId),
      ministry: new Types.ObjectId(ministryId),
      isActive: true,
    });

    return !!membership;
  }

  /**
   * Obter estat√≠sticas de um minist√©rio
   */
  async getMinistryStats(ministryId: string) {
    const totalMembers = await this.membershipModel.countDocuments({
      ministry: new Types.ObjectId(ministryId),
      isActive: true,
    });

    const volunteers = await this.membershipModel.countDocuments({
      ministry: new Types.ObjectId(ministryId),
      role: MembershipRole.Volunteer,
      isActive: true,
    });

    const leaders = await this.membershipModel.countDocuments({
      ministry: new Types.ObjectId(ministryId),
      role: MembershipRole.Leader,
      isActive: true,
    });

    return {
      totalMembers,
      volunteers,
      leaders,
    };
  }

  /**
   * Obt√©m estat√≠sticas de integridade de um usu√°rio
   */
  async getUserIntegrityStats(userId: string, tenantId: string) {
    console.log('üìä [MembershipService] Obtendo estat√≠sticas de integridade...');
    console.log('   - User ID:', userId);
    console.log('   - Tenant ID:', tenantId);

    // Usar o servi√ßo de integridade
    return await this.integrityService.getUserIntegrityStats(userId, tenantId);
  }

  /**
   * Criar MemberFunctions para um usu√°rio em um minist√©rio
   */
  private async _createMemberFunctionsForMinistry(
    userId: string,
    ministryId: string,
    role: MembershipRole,
    tenantId: Types.ObjectId,
    createdBy?: string,
    createdByRole?: string
  ): Promise<void> {
    console.log('üîß [MembershipService] _createMemberFunctionsForMinistry iniciado');
    console.log('üìã [MembershipService] Par√¢metros:', {
      userId,
      ministryId,
      role,
      tenantId,
      tenantIdString: tenantId.toString(),
      createdBy,
      createdByRole,
      userIdType: typeof userId,
      ministryIdType: typeof ministryId,
      tenantIdType: typeof tenantId
    });

    try {
      // Apenas para LEADERS criar MemberFunctions automaticamente
      if (role === MembershipRole.Leader) {
        console.log('üëë [MembershipService] Leader detectado - buscando todas as fun√ß√µes do minist√©rio...');
        
        // Buscar todas as fun√ß√µes dispon√≠veis no minist√©rio
        console.log('üîç [MembershipService] Buscando fun√ß√µes do minist√©rio...');
        console.log('üìã [MembershipService] Par√¢metros para getMinistryFunctions:', {
          tenantId: tenantId.toString(),
          ministryId,
          active: true
        });
        
        const ministryFunctions = await this.functionsService.getMinistryFunctions(
          tenantId.toString(),
          ministryId,
          true // apenas fun√ß√µes ativas
        );

        console.log('üìã [MembershipService] Fun√ß√µes encontradas no minist√©rio:', ministryFunctions.length);
        console.log('üìã [MembershipService] Detalhes das fun√ß√µes:', ministryFunctions.map(f => ({
          name: f.name,
          functionId: f.functionId
        })));

        if (ministryFunctions.length === 0) {
          console.log('‚ö†Ô∏è [MembershipService] Nenhuma fun√ß√£o encontrada no minist√©rio para atribuir ao leader');
          return;
        }

        // Leaders sempre aprovados automaticamente
        const functionStatus = MemberFunctionStatus.APROVADO;
        const functionLevel = MemberFunctionLevel.ESPECIALISTA;
        const notes = 'Atribu√≠do automaticamente ao l√≠der do minist√©rio';

        console.log('üìã [MembershipService] Status das fun√ß√µes:', functionStatus);
        console.log('üìã [MembershipService] N√≠vel das fun√ß√µes:', functionLevel);
        console.log('üìã [MembershipService] Notas:', notes);

        // Criar MemberFunctions para todas as fun√ß√µes do minist√©rio
        for (const ministryFunction of ministryFunctions) {
          try {
            console.log(`üîß [MembershipService] Criando MemberFunction para leader:`);
            console.log(`   - userId: ${userId}`);
            console.log(`   - ministryId: ${ministryId}`);
            console.log(`   - functionId: ${ministryFunction.functionId}`);
            console.log(`   - tenantId: ${tenantId.toString()}`);
            console.log(`   - status: ${functionStatus}`);
            console.log(`   - level: ${functionLevel}`);
            
            const result = await this.memberFunctionService.createMemberFunction(
              tenantId.toString(),
              null, // branchId
              {
                userId: userId,
                ministryId: ministryId,
                functionId: ministryFunction.functionId,
                status: functionStatus,
                level: functionLevel,
                priority: 1,
                notes: notes,
                isActive: true,
                createdByRole: createdByRole // Passar o role do usu√°rio que est√° criando
              },
              createdBy || 'system'
            );
            console.log(`‚úÖ [MembershipService] MemberFunction criada para leader: ${ministryFunction.functionId}`);
          } catch (error) {
            console.error(`‚ùå [MembershipService] Erro ao criar MemberFunction para leader:`, error);
            // Continuar com as outras fun√ß√µes mesmo se uma falhar
          }
        }
      } else {
        console.log('üë§ [MembershipService] Volunt√°rio detectado - fun√ß√µes ser√£o atribu√≠das via chamada espec√≠fica');
        console.log('   - As fun√ß√µes espec√≠ficas ser√£o criadas via endpoint /ministries/{ministryId}/members/{memberId}/functions');
      }
    } catch (error) {
      console.error('‚ùå [MembershipService] Erro ao criar MemberFunctions:', error);
      // N√£o falhar a vincula√ß√£o por erro ao criar fun√ß√µes
    }
  }
}
