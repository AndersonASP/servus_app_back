import {
  Injectable,
  BadRequestException,
  NotFoundException,
} from '@nestjs/common';
import { InjectModel } from '@nestjs/mongoose';
import { Model, Types } from 'mongoose';
import { Membership } from '../schemas/membership.schema';
import { MemberFunction } from '../../functions/schemas/member-function.schema';
import { MembershipRole } from '../../../common/enums/role.enum';

@Injectable()
export class MembershipIntegrityService {
  constructor(
    @InjectModel(Membership.name) private membershipModel: Model<Membership>,
    @InjectModel(MemberFunction.name)
    private memberFunctionModel: Model<MemberFunction>,
  ) {}

  /**
   * Valida se a remo√ß√£o de um membership n√£o deixar√° o usu√°rio √≥rf√£o
   */
  async validateMembershipRemoval(
    userId: string,
    membershipId: string,
    tenantId: string,
  ): Promise<{
    valid: boolean;
    reason?: string;
    remainingMemberships: number;
  }> {
    console.log('üîç [MembershipIntegrity] Validando remo√ß√£o de membership...');
    console.log('   - User ID:', userId);
    console.log('   - Membership ID:', membershipId);
    console.log('   - Tenant ID:', tenantId);

    // Verificar se o membership existe
    const membership = await this.membershipModel.findById(membershipId);
    if (!membership) {
      throw new NotFoundException('Membership n√£o encontrado');
    }

    // Verificar se o membership pertence ao usu√°rio
    if (membership.user.toString() !== userId) {
      throw new BadRequestException(
        'Membership n√£o pertence ao usu√°rio especificado',
      );
    }

    // Contar memberships ativos restantes do usu√°rio no tenant
    const remainingMemberships = await this.membershipModel.countDocuments({
      user: new Types.ObjectId(userId),
      tenant: new Types.ObjectId(tenantId),
      isActive: true,
      _id: { $ne: new Types.ObjectId(membershipId) }, // Excluir o membership que ser√° removido
    });

    console.log(
      'üìä [MembershipIntegrity] Memberships restantes:',
      remainingMemberships,
    );

    // CORRE√á√ÉO: Permitir que usu√°rios fiquem sem v√≠nculos ativos
    // Um usu√°rio pode n√£o ter nenhum v√≠nculo de minist√©rio ativo
    if (remainingMemberships === 0) {
      console.log(
        '‚ö†Ô∏è [MembershipIntegrity] Usu√°rio ficar√° sem v√≠nculos ativos ap√≥s remo√ß√£o - PERMITIDO',
      );
      // N√£o bloquear a remo√ß√£o, apenas avisar
    }

    return {
      valid: true,
      remainingMemberships,
    };
  }

  /**
   * Cria um membership padr√£o para usu√°rios sem v√≠nculos ativos
   */
  async ensureDefaultMembership(
    userId: string,
    tenantId: string,
    createdBy?: string,
  ): Promise<Membership> {
    console.log('üîß [MembershipIntegrity] Verificando membership padr√£o...');
    console.log('   - User ID:', userId);
    console.log('   - Tenant ID:', tenantId);

    const hasActiveMembership = await this.membershipModel.exists({
      user: new Types.ObjectId(userId),
      tenant: new Types.ObjectId(tenantId),
      isActive: true,
    });

    if (!hasActiveMembership) {
      console.log(
        '‚ö†Ô∏è [MembershipIntegrity] Usu√°rio sem membership ativo, verificando se j√° existe membership padr√£o...',
      );

      // Verificar se j√° existe um membership padr√£o (mesmo inativo)
      const existingDefaultMembership = await this.membershipModel.findOne({
        user: new Types.ObjectId(userId),
        tenant: new Types.ObjectId(tenantId),
        branch: null,
        ministry: null,
      });

      if (existingDefaultMembership) {
        console.log(
          '‚úÖ [MembershipIntegrity] Membership padr√£o j√° existe:',
          existingDefaultMembership._id,
        );

        // Se o membership padr√£o est√° inativo, reativ√°-lo para permitir novos v√≠nculos
        if (!existingDefaultMembership.isActive) {
          console.log(
            'üîÑ [MembershipIntegrity] Reativando membership padr√£o inativo...',
          );

          const updateData: any = {
            isActive: true,
          };

          if (createdBy) {
            updateData.updatedBy = new Types.ObjectId(createdBy);
          }

          const reactivatedMembership =
            await this.membershipModel.findByIdAndUpdate(
              existingDefaultMembership._id,
              updateData,
              { new: true },
            );

          if (!reactivatedMembership) {
            throw new Error('Falha ao reativar membership padr√£o');
          }

          console.log(
            '‚úÖ [MembershipIntegrity] Membership padr√£o reativado:',
            reactivatedMembership._id,
          );
          return reactivatedMembership;
        }

        return existingDefaultMembership;
      }

      console.log('‚ö†Ô∏è [MembershipIntegrity] Criando novo membership padr√£o...');

      const defaultMembership = new this.membershipModel({
        user: new Types.ObjectId(userId),
        tenant: new Types.ObjectId(tenantId),
        branch: null, // Matriz
        ministry: null, // Sem minist√©rio espec√≠fico
        role: MembershipRole.Volunteer,
        isActive: true, // Ativo para permitir v√≠nculos futuros
        createdBy: createdBy ? new Types.ObjectId(createdBy) : undefined,
      });

      const savedMembership = await defaultMembership.save();
      console.log(
        '‚úÖ [MembershipIntegrity] Membership padr√£o criado:',
        savedMembership._id,
      );

      return savedMembership;
    }

    console.log('‚úÖ [MembershipIntegrity] Usu√°rio j√° possui membership ativo');
    return null as any;
  }

  /**
   * Remove todas as MemberFunctions de um usu√°rio em um minist√©rio espec√≠fico
   */
  async removeMemberFunctionsFromMinistry(
    userId: string,
    ministryId: string,
    tenantId: string,
    branchId?: string,
  ): Promise<number> {
    console.log('üóëÔ∏è [MembershipIntegrity] Removendo MemberFunctions...');
    console.log('   - User ID:', userId);
    console.log('   - Ministry ID:', ministryId);
    console.log('   - Tenant ID:', tenantId);
    console.log('   - Branch ID:', branchId);

    const query: any = {
      memberId: new Types.ObjectId(userId),
      ministryId: new Types.ObjectId(ministryId),
      tenantId: new Types.ObjectId(tenantId),
    };

    if (branchId) {
      query.branchId = new Types.ObjectId(branchId);
    } else {
      query.branchId = null; // Matriz
    }

    const result = await this.memberFunctionModel.deleteMany(query);
    console.log(
      `‚úÖ [MembershipIntegrity] ${result.deletedCount} MemberFunctions removidas`,
    );

    return result.deletedCount;
  }

  /**
   * Valida se um usu√°rio pode ser removido de um minist√©rio
   */
  async validateMinistryRemoval(
    userId: string,
    ministryId: string,
    tenantId: string,
  ): Promise<{ valid: boolean; reason?: string; affectedMemberships: number }> {
    console.log('üîç [MembershipIntegrity] Validando remo√ß√£o de minist√©rio...');
    console.log('   - User ID:', userId);
    console.log('   - Ministry ID:', ministryId);
    console.log('   - Tenant ID:', tenantId);

    // Contar memberships ativos do usu√°rio neste minist√©rio
    const affectedMemberships = await this.membershipModel.countDocuments({
      user: new Types.ObjectId(userId),
      tenant: new Types.ObjectId(tenantId),
      ministry: new Types.ObjectId(ministryId),
      isActive: true,
    });

    console.log(
      'üìä [MembershipIntegrity] Memberships afetados:',
      affectedMemberships,
    );

    if (affectedMemberships === 0) {
      return {
        valid: false,
        reason: 'Usu√°rio n√£o est√° vinculado a este minist√©rio',
        affectedMemberships: 0,
      };
    }

    // Verificar se remo√ß√£o deixar√° usu√°rio √≥rf√£o
    const totalActiveMemberships = await this.membershipModel.countDocuments({
      user: new Types.ObjectId(userId),
      tenant: new Types.ObjectId(tenantId),
      isActive: true,
    });

    console.log(
      'üìä [MembershipIntegrity] Total de memberships ativos:',
      totalActiveMemberships,
    );

    // CORRE√á√ÉO: Permitir que usu√°rios fiquem sem v√≠nculos ativos
    // Um usu√°rio pode n√£o ter nenhum v√≠nculo de minist√©rio ativo
    if (totalActiveMemberships <= affectedMemberships) {
      console.log(
        '‚ö†Ô∏è [MembershipIntegrity] Usu√°rio ficar√° sem v√≠nculos ativos ap√≥s remo√ß√£o - PERMITIDO',
      );
      // N√£o bloquear a remo√ß√£o, apenas avisar
    }

    return {
      valid: true,
      affectedMemberships,
    };
  }

  /**
   * Obt√©m estat√≠sticas de integridade de um usu√°rio
   */
  async getUserIntegrityStats(
    userId: string,
    tenantId: string,
  ): Promise<{
    totalMemberships: number;
    activeMemberships: number;
    inactiveMemberships: number;
    totalMemberFunctions: number;
    ministries: string[];
    branches: string[];
  }> {
    console.log(
      'üìä [MembershipIntegrity] Obtendo estat√≠sticas de integridade...',
    );
    console.log('   - User ID:', userId);
    console.log('   - Tenant ID:', tenantId);

    const [
      totalMemberships,
      activeMemberships,
      inactiveMemberships,
      memberFunctions,
      memberships,
    ] = await Promise.all([
      this.membershipModel.countDocuments({
        user: new Types.ObjectId(userId),
        tenant: new Types.ObjectId(tenantId),
      }),
      this.membershipModel.countDocuments({
        user: new Types.ObjectId(userId),
        tenant: new Types.ObjectId(tenantId),
        isActive: true,
      }),
      this.membershipModel.countDocuments({
        user: new Types.ObjectId(userId),
        tenant: new Types.ObjectId(tenantId),
        isActive: false,
      }),
      this.memberFunctionModel.countDocuments({
        memberId: new Types.ObjectId(userId),
        tenantId: new Types.ObjectId(tenantId),
      }),
      this.membershipModel
        .find({
          user: new Types.ObjectId(userId),
          tenant: new Types.ObjectId(tenantId),
          isActive: true,
        })
        .select('ministry branch')
        .lean(),
    ]);

    const ministries = [
      ...new Set(
        memberships.map((m) => m.ministry?.toString()).filter(Boolean),
      ),
    ] as string[];
    const branches = [
      ...new Set(memberships.map((m) => m.branch?.toString()).filter(Boolean)),
    ] as string[];

    return {
      totalMemberships,
      activeMemberships,
      inactiveMemberships,
      totalMemberFunctions: memberFunctions,
      ministries,
      branches,
    };
  }
}
