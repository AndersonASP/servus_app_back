// ========================================
// SCRIPT PARA CRIAR USU√ÅRIO ADMINISTRADOR DO SERVUS
// ========================================
// Copie e cole este c√≥digo diretamente no mongosh

// 1. Conectar ao banco
use('servus');

// 2. Criar Tenant Servus Admin
const tenantResult = db.tenants.insertOne({
  name: "Servus Admin",
  description: "Tenant administrativo do sistema Servus",
  isActive: true,
  cnpj: "00.000.000/0001-00",
  email: "admin@servus.com.br",
  telefone: "(11) 99999-9999",
  site: "https://servus.com.br",
  endereco: {
    cep: "00000-000",
    rua: "Rua Administrativa",
    numero: "1",
    bairro: "Centro",
    cidade: "S√£o Paulo",
    estado: "SP",
    complemento: "Sede Administrativa"
  },
  plan: "enterprise",
  maxBranches: -1,
  planoAtivoDesde: new Date(),
  statusPagamento: "ativo",
  formaPagamentoPreferida: "pix",
  logoUrl: "https://servus.com.br/logo.png",
  corTema: "#1e40af",
  idioma: "pt-BR",
  timezone: "America/Sao_Paulo",
  diasCulto: [
    { dia: "domingo", horarios: ["09:00", "19:30"] },
    { dia: "quarta", horarios: ["19:30"] }
  ],
  eventosPadrao: [
    { nome: "Culto Dominical", dia: "domingo", horarios: ["09:00", "19:30"], tipo: "culto" },
    { nome: "Culto de Quarta", dia: "quarta", horarios: ["19:30"], tipo: "culto" }
  ],
  canalComunicacaoPreferido: "whatsapp",
  whatsappOficial: "5511999999999",
  emailFinanceiro: "financeiro@servus.com.br",
  emailSuporte: "suporte@servus.com.br",
  limiteUsuarios: -1,
  limiteArmazenamento: -1,
  ultimoAcesso: new Date(),
  notasInternas: "Tenant administrativo do sistema Servus",
  features: {
    functionsByMinistry: true
  },
  createdAt: new Date(),
  updatedAt: new Date()
});

const tenantId = tenantResult.insertedId;
print("‚úÖ Tenant criado:", tenantId);

// 3. Criar Usu√°rio Administrador
const userResult = db.users.insertOne({
  name: "Servus Administrator",
  email: "admin@servus.com.br",
  password: "$2b$10$rQZ8K9vL2mN3pO4qR5sT6uV7wX8yZ9aB0cD1eF2gH3iJ4kL5mN6oP7qR8sT9uV",
  role: "servus_admin",
  tenantId: tenantId,
  branchId: null,
  googleId: null,
  picture: "https://servus.com.br/admin-avatar.png",
  isActive: true,
  phone: "(11) 99999-9999",
  birthDate: "1990-01-01",
  address: {
    cep: "00000-000",
    rua: "Rua Administrativa",
    numero: "1",
    bairro: "Centro",
    cidade: "S√£o Paulo",
    estado: "SP"
  },
  bio: "Administrador do sistema Servus",
  skills: ["Administra√ß√£o", "Gest√£o", "Suporte T√©cnico"],
  availability: "24/7",
  profileCompleted: true,
  refreshTokens: [],
  createdAt: new Date(),
  updatedAt: new Date()
});

const userId = userResult.insertedId;
print("‚úÖ Usu√°rio criado:", userId);

// 4. Criar Membership
const membershipResult = db.memberships.insertOne({
  user: userId,
  tenant: tenantId,
  branch: null,
  ministry: null,
  role: "tenant_admin",
  isActive: true,
  createdAt: new Date(),
  updatedAt: new Date()
});

const membershipId = membershipResult.insertedId;
print("‚úÖ Membership criado:", membershipId);

// 5. Atualizar Tenant com respons√°vel
db.tenants.updateOne(
  { _id: tenantId },
  { 
    $set: { 
      responsavel: userId,
      createdBy: userId,
      updatedAt: new Date()
    }
  }
);

print("‚úÖ Tenant atualizado com respons√°vel");

// 6. Verificar cria√ß√£o
print("\nüìä DADOS CRIADOS:");
print("Tenant:", db.tenants.findOne({ _id: tenantId }).name);
print("Usu√°rio:", db.users.findOne({ _id: userId }).name);
print("Email:", db.users.findOne({ _id: userId }).email);
print("Role:", db.users.findOne({ _id: userId }).role);

print("\nüéâ USU√ÅRIO ADMINISTRADOR CRIADO COM SUCESSO!");
print("üìù CREDENCIAIS:");
print("   Email: admin@servus.com.br");
print("   Senha: servus123");
print("   Role: servus_admin");
print("\n‚ö†Ô∏è  ALTERE A SENHA AP√ìS O PRIMEIRO LOGIN!");
